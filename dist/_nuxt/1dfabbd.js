(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{468:function(n,e,t){var content=t(484);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(105).default)("7c35dc9c",content,!0,{sourceMap:!1})},483:function(n,e,t){"use strict";t(468)},484:function(n,e,t){var o=t(104)(!1);o.push([n.i,".smoke-transition-canvas{position:absolute;top:0;left:0;width:100%;height:100%}",""]),n.exports=o},487:function(n,e,t){"use strict";t.r(e);t(61),t(52),t(60),t(29),t(90),t(47),t(91);var o=t(13),r=t(78),c="#define GLSLIFY 1\nuniform float rotation;\nuniform vec2 center;\n\nvarying vec2 vUv;\n\nvoid main() {\n\t// #include <uv_vertex>\n  vUv = uv;\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n}",v="#define GLSLIFY 1\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat fbm3d(vec3 x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n\n    \n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * snoise(x);\n            x = x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\n// uniform sampler2D uTxtShape;\nuniform float uTime;\nuniform float uThreshold;\nuniform float uScaleFactor;\nuniform float uTimeFactor;\nuniform float uDisplayStrength;\nuniform float uGradientSize;\nuniform vec3 uColor;\nuniform vec2 uResolution;\n\nvarying vec2 vUv;\n\nvoid main() {\n    float xScale = uResolution.x / uResolution.y;\n    vec2 scaledUv = vec2(vUv.x * xScale, vUv.y);\n    vec2 newUv = vec2(vUv.x * xScale, vUv.y);\n\n    float noiseBig = fbm3d(vec3(scaledUv * uScaleFactor, uTime * uTimeFactor), 4) + 1.0 * 0.5;\n    newUv += noiseBig * uDisplayStrength;\n\n    float alpha;\n    if (newUv.x / xScale > uThreshold) {\n        alpha = 1.0;\n    } else if (newUv.x / xScale > uThreshold - uGradientSize) {\n        alpha = (newUv.x / xScale - uThreshold) / uGradientSize + 1.0;\n    } else {\n        alpha = 0.0;\n    }\n\n    gl_FragColor = vec4(uColor, alpha);\n}\n";function l(object,n){var e=Object.keys(object);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(object);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(object,n).enumerable}))),e.push.apply(e,t)}return e}function x(n){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?l(Object(source),!0).forEach((function(e){Object(o.a)(n,e,source[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(source)):l(Object(source)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(source,e))}))}return n}var d={methods:{useSmoke:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2e3,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n/4,t=1.2,o=t-1;return{enter:function(n,t){n.animate([{opacity:0},{opacity:1}],{duration:e,easing:"ease-out"}).onfinish=t},leave:function(e,c){var canvas=l(e),v=new r.M({canvas:canvas,alpha:!0});v.setClearColor(0,0);var x=.75*n,f=n-x,y=d({gradientSize:o}),w=y.scene,h=y.planeMaterial,z=y.planeMesh,S=y.camera,P=m(v,S,z,h),C=Date.now();!function n(){var time=Date.now()-C;if(h){var o=Date.now()-C;h.uniforms.uThreshold.value=t-o/x*t,h.uniforms.uTime.value=o,v.render(w,S)}time<x?requestAnimationFrame(n):(e.style.opacity=0,canvas.animate([{opacity:1},{opacity:0}],{duration:f,easing:"linear"}).onfinish=function(){c(),canvas.parentNode.removeChild(canvas),P()})}()}};function l(n){var canvas=document.createElement("canvas");return canvas.className="smoke-transition-canvas",n.insertAdjacentElement("afterend",canvas),canvas}function d(n){var e=new r.A,t=new r.v,o=new r.C({uniforms:x(x({},r.J.clone(r.B.sprite.uniforms)),{},{uThreshold:{value:1.25},uTime:{value:0},uScaleFactor:{value:3},uTimeFactor:{value:.001},uDisplayStrength:{value:.12},uGradientSize:{value:n.gradientSize},uColor:{value:new r.L(.25,.25,.25)},uResolution:{value:new r.K(window.innerWidth,window.innerHeight)}}),vertexShader:c,fragmentShader:v,transparent:!0}),l=new r.q(t,o);l.scale.set(window.innerWidth/window.innerHeight,1,1),e.add(l);var d=new r.t(45,window.innerWidth/window.innerHeight,.001,1e3);return d.position.set(0,0,1),e.add(d),{scene:e,planeGeometry:t,planeMaterial:o,planeMesh:l,camera:d}}function m(n,e,t,o){var c=function(){e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight,window.devicePixelRatio),t.scale.set(window.innerWidth/window.innerHeight,1,1),o.uniforms.uResolution.value=new r.K(window.innerWidth*window.devicePixelRatio,window.innerHeight*window.devicePixelRatio)};return window.addEventListener("resize",c),function(){return window.removeEventListener("resize",c)}}}}},m=d,f=(t(483),t(28)),component=Object(f.a)(m,(function(){var n=this,e=n.$createElement;return(n._self._c||e)("transition",{attrs:{css:!1,appear:"",mode:"out-in"},on:{enter:n.enter,leave:n.leave}},[n._t("default")],2)}),[],!1,null,null,null);e.default=component.exports}}]);